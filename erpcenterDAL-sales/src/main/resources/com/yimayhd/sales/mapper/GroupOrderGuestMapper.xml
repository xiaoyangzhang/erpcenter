<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yihg.sales.dao.GroupOrderGuestMapper" >
  <resultMap id="BaseResultMap" type="com.yihg.sales.po.GroupOrderGuest" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="order_id" property="orderId" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="certificate_type_id" property="certificateTypeId" jdbcType="INTEGER" />
    <result column="certificate_num" property="certificateNum" jdbcType="VARCHAR" />
    <result column="gender" property="gender" jdbcType="INTEGER" />
    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="native_place" property="nativePlace" jdbcType="VARCHAR" />
    <result column="age" property="age" jdbcType="INTEGER" />
    <result column="career" property="career" jdbcType="VARCHAR" />
    <result column="is_single_room" property="isSingleRoom" jdbcType="INTEGER" />
    <result column="is_leader" property="isLeader" jdbcType="INTEGER" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="BIGINT" />
    <result column="is_guide" property="isGuide" jdbcType="INTEGER" />
    <result column="man" property="man" jdbcType="INTEGER" />
    <result column="woman" property="woman" jdbcType="INTEGER" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="ticketTime" property="ticketTime" jdbcType="VARCHAR" />
    <result column="groupId" property="groupId" jdbcType="INTEGER" />
    <result column="group_code" property="groupCode" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, order_id, name, type, certificate_type_id, certificate_num, gender, mobile, native_place, 
    age, career, is_single_room, is_leader, remark, create_time,is_guide
  </sql>
  <select id="getGuestByGuestCertificateNum" resultMap="BaseResultMap">
    select 
   		a.*
    from group_order_guest a ,group_order b 
    where a.certificate_num = #{guestCertificateNum}
    and a.order_id = b.id and  b.state!=-1
    <if test="orderId!=null">
    	and order_id != ${orderId}
    </if>
  </select>
  <select id="getGuestByGroupIdAndType" resultMap="BaseResultMap" parameterType="Integer">
	SELECT gog.*,go.`group_id` FROM group_order_guest gog 
	INNER JOIN group_order go ON go.id = gog.`order_id`
	INNER JOIN tour_group tg ON tg.id = go.group_id
	WHERE gog.`type` = #{guestType} and tg.id=#{groupId}
  </select>
  <select id="getGuestByGroupIdAndIsLeader" resultMap="BaseResultMap" parameterType="Integer">
	SELECT gog.*,go.`group_id` FROM 
	group_order_guest gog ,
	group_order go,
	tour_group tg
	where gog.order_id=go.id 
		and go.group_id=tg.id
		and tg.id=#{groupId}
		<if test="isLeader != null" >
        	and gog.is_leader =#{isLeader}
      	</if>
	order by gog.order_id
	
  </select>
   <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from group_order_guest
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectGuestCountByOrderId" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select 
    	count(1)
    from 
    	group_order_guest
    where
    	order_id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectNumAdultByOrderID" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select 
    	count(1) 
    from 
    	group_order_guest
    where
    	order_id = #{id,jdbcType=INTEGER}
    	and type=1
  </select>
  <select id="selectNumChildByOrderID" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select 
    	count(1)
    from 
    	group_order_guest
    where
    	order_id = #{id,jdbcType=INTEGER}
    	and type=2
  </select>
  <select id="selectNumGuideByOrderID" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select 
    	count(1)
    from 
    	group_order_guest
    where
    	order_id = #{id,jdbcType=INTEGER}
    	and type=3
  </select>
  <select id="selectByOrderId" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from group_order_guest
		where order_id = #{orderId,jdbcType=INTEGER}
	</select>
	  <select id="selectGenderSum" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select ifnull(SUM(gender=1),0) man,ifnull(SUM(gender=0),0) woman
		from group_order_guest
		where order_id = #{orderId,jdbcType=INTEGER}
	</select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from group_order_guest
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.yihg.sales.po.GroupOrderGuest" >
    insert into group_order_guest (id, order_id, name, 
      type, certificate_type_id, certificate_num, 
      gender, mobile, native_place, 
      age, career, is_single_room, 
      is_leader, remark, create_time,is_guide
      )
    values (#{id,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, 
      #{type,jdbcType=INTEGER}, #{certificateTypeId,jdbcType=INTEGER}, #{certificateNum,jdbcType=VARCHAR}, 
      #{gender,jdbcType=INTEGER}, #{mobile,jdbcType=VARCHAR}, #{nativePlace,jdbcType=VARCHAR}, 
      #{age,jdbcType=INTEGER}, #{career,jdbcType=VARCHAR}, #{isSingleRoom,jdbcType=INTEGER}, 
      #{isLeader,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, #{createTime,jdbcType=BIGINT},#{isGuide,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yihg.sales.po.GroupOrderGuest" >
    insert into group_order_guest
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="certificateTypeId != null" >
        certificate_type_id,
      </if>
      <if test="certificateNum != null" >
        certificate_num,
      </if>
      <if test="gender != null" >
        gender,
      </if>
      <if test="mobile != null" >
        mobile,
      </if>
      <if test="nativePlace != null" >
        native_place,
      </if>
      <if test="age != null" >
        age,
      </if>
      <if test="career != null" >
        career,
      </if>
      <if test="isSingleRoom != null" >
        is_single_room,
      </if>
      <if test="isLeader != null" >
        is_leader,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="isGuide != null" >
        is_guide,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderId != null" >
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="certificateTypeId != null" >
        #{certificateTypeId,jdbcType=INTEGER},
      </if>
      <if test="certificateNum != null" >
        #{certificateNum,jdbcType=VARCHAR},
      </if>
      <if test="gender != null" >
        #{gender,jdbcType=INTEGER},
      </if>
      <if test="mobile != null" >
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="nativePlace != null" >
        #{nativePlace,jdbcType=VARCHAR},
      </if>
      <if test="age != null" >
        #{age,jdbcType=INTEGER},
      </if>
      <if test="career != null" >
        #{career,jdbcType=VARCHAR},
      </if>
      <if test="isSingleRoom != null" >
        #{isSingleRoom,jdbcType=INTEGER},
      </if>
      <if test="isLeader != null" >
        #{isLeader,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=BIGINT},
      </if>
      <if test="isGuide != null" >
        #{isGuide,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yihg.sales.po.GroupOrderGuest" >
    update group_order_guest
    <set >
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="certificateTypeId != null" >
        certificate_type_id = #{certificateTypeId,jdbcType=INTEGER},
      </if>
      <if test="certificateNum != null" >
        certificate_num = #{certificateNum,jdbcType=VARCHAR},
      </if>
      <if test="gender != null" >
        gender = #{gender,jdbcType=INTEGER},
      </if>
      <if test="mobile != null" >
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="nativePlace != null" >
        native_place = #{nativePlace,jdbcType=VARCHAR},
      </if>
      <if test="age != null" >
        age = #{age,jdbcType=INTEGER},
      </if>
      <if test="career != null" >
        career = #{career,jdbcType=VARCHAR},
      </if>
      <if test="isSingleRoom != null" >
        is_single_room = #{isSingleRoom,jdbcType=INTEGER},
      </if>
      <if test="isLeader != null" >
        is_leader = #{isLeader,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
       <if test="isGuide != null" >
        is_guide = #{isGuide,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yihg.sales.po.GroupOrderGuest" >
    update group_order_guest
    set order_id = #{orderId,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      certificate_type_id = #{certificateTypeId,jdbcType=INTEGER},
      certificate_num = #{certificateNum,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=INTEGER},
      mobile = #{mobile,jdbcType=VARCHAR},
      native_place = #{nativePlace,jdbcType=VARCHAR},
      age = #{age,jdbcType=INTEGER},
      career = #{career,jdbcType=VARCHAR},
      is_single_room = #{isSingleRoom,jdbcType=INTEGER},
      is_leader = #{isLeader,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=BIGINT},
      is_guide = #{isGuide,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getGroupOrderGuestList" resultMap="BaseResultMap">
  	select guest.* from group_order_guest guest join  `group_order` `order` on guest.order_id=order.id where 1=1 
  	<if test="parameter.supplierId!=null"> and order.supplier_id=#{parameter.supplierId}</if>
  	<if test="parameter.groupId!=null">  and order.group_id=#{parameter.groupId}</if> and order.biz_id=#{parameter.bizId}
  
  </select>
  <select id="getGuestInfoByOrderId" parameterType="java.lang.String" resultType="java.lang.String">
  	SELECT GROUP_CONCAT(DISTINCT CONCAT_WS('/',`name`,IF(gender=1,'男','女'),age,IFNULL(certificate_num,''),native_place)) guestInfo FROM `group_order_guest` 
where 1=1 <if test="orderId!=null ">and  order_id = #{orderId}</if>
GROUP BY order_id
  </select>
  <select id="selectGroupOrderGuestList" resultMap="BaseResultMap">
  	SELECT gog.gender,gog.`type`,gog.`name` FROM `tour_group` tg JOIN  `group_order` go ON tg.`id`=go.`group_id` JOIN `group_order_guest` gog ON go.id=gog.`order_id`  
  	where tg.biz_id=#{parameter.bizId} and tg.group_state in (1,3,4) and gog.type!=3
  	AND tg.operator_id IN 
		<foreach item="item" index="index" collection="parameter.set" open="(" separator="," close=")">
		#{item}
		</foreach>
		<if test=" parameter.dateType==0">
			<if test="parameter.startTime != null">and
				tg.date_start  <![CDATA[>=]]>
				#{parameter.startTime}
			</if>
			<if test="parameter.endTime != null">and
				tg.date_start<![CDATA[<=]]>
				#{parameter.endTime}
			</if>
		</if>
		<if test="parameter.dateType==1">
			<if test="parameter.startTime != null">and
				go.create_time  <![CDATA[>=]]>
				#{parameter.startTime}
			</if>
			<if test="parameter.endTime != null">and
				go.create_time<![CDATA[<=]]>
				#{parameter.endTime}
			</if>
		</if>
		<if test="parameter.productName != null and parameter.productName !=''">and 
		(go.product_brand_name like concat( '%',#{parameter.productName},'%') or go.product_name like concat('%',#{parameter.productName},'%') )</if>
		<if test="parameter.supplierName != null and parameter.supplierName != ''">and 
		go.supplier_name like concat( '%',#{parameter.supplierName},'%') </if>
		<if test="parameter.operType==0 ">
			<if
				test="parameter.saleOperatorIds!=null and parameter.saleOperatorIds!=''">
				and go.sale_operator_id in (${parameter.saleOperatorIds})
			</if>
		</if>
		<if test="parameter.operType==1">
			<if
				test="parameter.saleOperatorIds!=null and parameter.saleOperatorIds!=''">
				and tg.operator_id in (${parameter.saleOperatorIds})
			</if>
		</if>
  </select>
  <select id="selectGuestAgeList"  resultType="java.util.HashMap">
	  	SELECT 
		cast(SUM(go.`num_adult`) as signed) adultCount,cast(SUM(go.`num_child`) as signed) childCount
		,cast(SUM(a) as signed) '12以下'
		,cast(SUM(b) as signed) '13~23',cast(SUM(c) as signed) '24~28',cast(SUM(d) as signed) '29~49',cast(SUM(e) as signed) '50~55',cast(SUM(f) as signed) '56~65',cast(SUM(g) as signed) '66以上'
		 FROM `tour_group` tg JOIN 
		 `group_order` go ON tg.`id`=go.`group_id` 
		
		 JOIN  (SELECT order_id,`type`,COUNT(CASE WHEN `age`<![CDATA[<=]]>12  THEN id END) a,COUNT(CASE WHEN `age`<![CDATA[>=]]>13 AND `age`<![CDATA[<=]]>23 THEN id END) b,COUNT(CASE WHEN `age`<![CDATA[>=]]>24 AND `age`<![CDATA[<=]]>28 THEN id END) c
		,COUNT(CASE WHEN `age`<![CDATA[>=]]>29 AND `age`<![CDATA[<=]]>49 THEN id END) d,COUNT(CASE WHEN `age`<![CDATA[>=]]>50 AND `age`<![CDATA[<=]]>55 THEN id END) e,COUNT(CASE WHEN `age`<![CDATA[>=]]>56 AND `age`<![CDATA[<=]]>65 THEN id END) f
		,COUNT(CASE WHEN age<![CDATA[>=]]>66 THEN id END) g FROM `group_order_guest` where  `type`!=3 GROUP BY order_id) gog ON gog.order_id=go.id
		 
		 where  tg.biz_id=#{parameter.bizId} and tg.group_state in (1,3,4) 
		 AND tg.operator_id IN 
 	 <foreach item="item" index="index" collection="parameter.set" open="(" separator="," close=")">
		#{item}
		</foreach>
		<if test=" parameter.dateType==0">
			<if test="parameter.startTime != null">and
				tg.date_start  <![CDATA[>=]]>
				#{parameter.startTime}
			</if>
			<if test="parameter.endTime != null">and
				tg.date_start<![CDATA[<=]]>
				#{parameter.endTime}
			</if>
		</if>
		<if test="parameter.dateType==1">
			<if test="parameter.startTime != null">and
				go.create_time  <![CDATA[>=]]>
				#{parameter.startTime}
			</if>
			<if test="parameter.endTime != null">and
				go.create_time<![CDATA[<=]]>
				#{parameter.endTime}
			</if>
		</if>
		<if test="parameter.productName != null and parameter.productName !=''">and 
		(go.product_brand_name like concat( '%',#{parameter.productName},'%') or go.product_name like concat('%',#{parameter.productName},'%') )</if>
		<if test="parameter.supplierName != null and parameter.supplierName != ''">and 
		go.supplier_name like concat( '%',#{parameter.supplierName},'%') </if>
		<if test="parameter.operType==0 ">
			<if
				test="parameter.saleOperatorIds!=null and parameter.saleOperatorIds!=''">
				and go.sale_operator_id in (${parameter.saleOperatorIds})
			</if>
		</if>
		<if test="parameter.operType==1">
			<if
				test="parameter.saleOperatorIds!=null and parameter.saleOperatorIds!=''">
				and tg.operator_id in (${parameter.saleOperatorIds})
			</if>
		</if>
	</select>
	
	<select id="selectGuestForOrders" resultType="java.util.HashMap" parameterType="com.yihg.mybatis.utility.PageBean">
		SELECT
			order_id, GROUP_CONCAT(CONCAT_WS('@', name, certificate_num, mobile)) AS guestNames
		FROM group_order_guest gog1
		WHERE 1=1 
		<if test="page.parameter.guestName !=null and page.parameter.guestName !=''">
			AND name like concat('%',#{page.parameter.guestName},'%')
		</if>
		<if test="page.parameter.mobile !=null and page.parameter.mobile !=''">
			AND mobile like concat('%',#{page.parameter.mobile},'%')
		</if> 
		AND order_id in (${orderIds}) 
		GROUP BY order_id
	</select>

	<select id="selectOrderIdsByNameOrMobile" resultMap="BaseResultMap" parameterType="com.yihg.mybatis.utility.PageBean">
		SELECT DISTINCT order_id FROM `group_order_guest`
		WHERE 1=1 
		<if test="page.parameter.guestName !=null and page.parameter.guestName !=''">
			AND name like concat('%',#{page.parameter.guestName},'%')
		</if>
		<if test="page.parameter.mobile !=null and page.parameter.mobile !=''">
			AND mobile like concat('%',#{page.parameter.mobile},'%')
		</if> 
 		<if test="(page.parameter.mobile ==null or page.parameter.mobile =='' ) and ( page.parameter.guestName ==null or page.parameter.guestName =='')">
			AND 1=2
		</if> 	
	</select>
	
	<select id="getEmployeeByMobile" resultMap="BaseResultMap">
        select *
        from group_order_guest
        where mobile=#{mobile}
  	 </select>
	
	  <select id="selectGuestTicketInfo"  resultMap="BaseResultMap" parameterType="Integer">
	  SELECT g.*,'' userName,'' TicketTime,tg.id groupId, tg.group_code
	  FROM group_order_guest g join group_order go on (g.order_id=go.id) join tour_group tg on (tg.id=go.group_id)
	  WHERE g.order_id in (select id from group_order where ext_res_id=#{resId})
	  </select>
</mapper>